#include<iostream>
#include<map>
#include<list>
#include<queue>

using namespace std;

template<typename T>
class Graph
{
private:
	map<T, list<T>> l;

public:
	void addedge(int x, int y)//assume bidirectional
	{
		l[x].push_back(y);
		l[y].push_back(x);
	}


	void displayneighbours()
	{
		for (auto node_pair : l)
		{
			T node = node_pair.first;
			cout << "neighbour of  " << node << "  ";
			list<T> neigh = node_pair.second;
			for (auto ele : neigh)
			{
				cout << ele << ", ";
			}
			cout << endl;
		}
	}


	bool cycle_helper(T node, map<T, bool> &visited, int parent)
	{
		visited[node] = true;

		for (auto nbr : l[node])
		{
			if (!visited[nbr])
			{
				return cycle_helper(nbr, visited, node);
			}
			else if (nbr != parent)
				return true;
		}

		return false;
	}

	bool contains_cycle(T src)
	{
		map<int, bool>  visited;
		for (auto my_pair : l)
		{
			T node = my_pair.first;
			visited[node] = false;
		}
		return cycle_helper(0, visited, -1);
	}
};


int main()
{
	Graph<int>  g;

	g.addedge(0,1);
	g.addedge(1,2);
	g.addedge(0,2);
	//g.addedge(3,4);
	//g.addedge(4,0);

	g.displayneighbours();

	cout << endl;

	cout<<g.contains_cycle(0);

	return 0;
}
