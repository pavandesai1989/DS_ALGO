#include<iostream>
#include<vector>

using namespace std;



void maxheapify(int arr[], int n, int i)
{
	int left = 2 * i + 1;
	int right = 2 * i + 2;
	int largest = i;

	if (left<n && arr[left]>arr[i])
		largest = left;

	if (right<n && arr[right] > arr[largest])
		largest = right;

	if (largest != i)
	{
		std::swap(arr[largest], arr[i]);
		maxheapify(arr, n, largest);
	}
}


void buildmaxheap(int arr[], int n)
{
	for (int i = (n - 2) / 2; i >= 0; i--)
		maxheapify(arr, n, i);
}

void Heapsort(int arr[], int n)
{
	//build heap .here i used max heap
	buildmaxheap(arr, n);

	for (int i = n - 1; i >= 1; i--) //use the concept of selection sort 
	{
		std::swap(arr[i],arr[0]);
		maxheapify(arr, i, 0); //once we swap we remove lase ele from heap so we passing i here 
	}
}



int main()
{

	int arr[] = { 10,15,50,4,20 };
	int size = sizeof(arr) / sizeof(arr[0]);

	Heapsort(arr, size);

	for (auto ele : arr)
		cout << ele << " ";

	return 0;
}
