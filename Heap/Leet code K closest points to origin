#include<iostream>
#include<vector>
#include<queue>

using namespace std;

vector<vector<int>> kClosest(vector<vector<int>>& points, int k)
{
	priority_queue<pair<double, int>> pq;

	for (int i = 0; i < k; i++)
	{
		double val = sqrt(points[i][0] * points[i][0] + points[i][1] * points[i][1]);
		pq.push({ val,i });
	}

	for (int i = k; i < points.size(); i++)
	{
		double curr = sqrt(points[i][0] * points[i][0] + points[i][1] * points[i][1]);
		if (curr < pq.top().first)
		{
			pq.pop();
			pq.push({ curr,i });
		}
	}

	vector<vector<int>> res;

	while (!pq.empty())
	{
		pair<double, int> top = pq.top();
		res.push_back(points[top.second]);
		pq.pop();
	}

	return res;


}
int main()
{
	vector<vector<int>> points = { { -5, 4 },
								  { -6, -5 },
								  { 4, 6 } };

	vector<vector<int>> vres = kClosest(points, 2);

	for (int i = 0; i < vres.size(); i++)
	{
		cout << vres[i][0] << "," << vres[i][1] << endl;
	}

	return 0;
}
