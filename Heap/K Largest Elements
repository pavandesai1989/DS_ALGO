#include<iostream>
#include<queue>
#include<vector>

using namespace std;


vector<int> KLargest(int arr[], int n, int k)
{
	vector<int> vec;

	if (k > n || k < 0)  return vec;

	priority_queue<int, vector<int>, greater<int>> pq;

	for (int i = 0; i < k; i++)
		pq.push(arr[i]);

	for (int i = k; i < n; i++)
	{
		if (arr[i] > pq.top())
		{
			pq.pop();
			pq.push(arr[i]);
		}
	}

	while (!pq.empty())
	{
		vec.push_back(pq.top());
		pq.pop();
	}

	return vec;
}



int main()
{
	int arr[] = { 5,15,10,20,8,25,18 };
	int size = sizeof(arr) / sizeof(arr[0]);

	vector<int> v = KLargest(arr, size,4);

	for (auto ele : v)
		cout << ele << "   ";

	return 0;
}
