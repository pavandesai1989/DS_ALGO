#include<iostream>
#include<vector>
#include<queue>
using namespace std;


//int parent(int x)
//{
//	return (x - 1) / 2;
//}
//
//
//void swap(int* x, int *y)
//{
//	int temp = *x;
//	*x = *y;
//	*y = temp;
//}
//
//void MinHeapify(int arr[], int n, int k)
//{
//	int L = 2 * k + 1;
//	int R = 2 * k + 2;
//
//	int smallest = k;
//
//	if (L < n && arr[L] < arr[k])
//		smallest = L;
//
//	if (R < n && arr[R] < arr[k])
//		smallest = R;
//
//	while (smallest != k)
//	{
//		swap(&arr[smallest], &arr[k]);
//		MinHeapify(arr, n, smallest);
//	}
//}
//
//
////build min heap of k elements 
//void BuildMinHeap(int arr[], int n, int k)
//{
//	for (int i = (n - 2) / 2; i >= 0; i--)
//		MinHeapify(arr, n, i);
//
//	cout << "aray is" << endl;
//	for (int i = 0; i < n; i++)
//		cout << arr[i] << "  ";
//
//	cout << endl;
//}


//Function to return k largest elements from an array.
vector<int> kLargest(int arr[], int n, int k)
{
	vector<int>  vec;

	priority_queue<int, vector<int>, greater<int>> pq;
		
	for (int i = 0; i < k; i++)
		pq.push(arr[i]);

	for (int i = k; i < n; i++)
	{
		if (arr[i] > pq.top())
		{
			pq.pop();
			pq.push(arr[i]);
		}
	}

	while (!pq.empty())
	{
		vec.push_back(pq.top());
		pq.pop();
	}

	return vec;
}


int KthLargest(int arr[], int n, int k)
{
	priority_queue<int, vector<int>, greater<int>> pq;

	for (int i = 0; i < k; i++)
		pq.push(arr[i]);

	for (int i = k; i < n; i++)
	{
		if (arr[i] > pq.top())
		{
			pq.pop();
			pq.push(arr[i]);
		}
	}

	return pq.top();
}
struct Triplet
{
	int val, apos, vpos;
	Triplet(int v, int ap, int vp)
	{
		val = v;
		apos = ap;
		vpos = vp;
	}
};


struct mycmp
{
	bool operator()(Triplet t1, Triplet t2)
	{
		return t1.val > t2.val;
	}
};

vector<int> mergeKArrays(vector<vector<int>> arr, int K)
{
	vector<int>  vec;
	priority_queue<Triplet, vector<Triplet>, mycmp>  pq;

	//insert first ele of all array in min heap
	for (int i = 0; i < arr.size(); i++)
	{
		Triplet    t(arr[i][0], i, 0);
		pq.push(t);
	}

	//compare 
	while (!pq.empty())
	{
		Triplet curr = pq.top();
		pq.pop();
		vec.push_back(curr.val);

		int ap = curr.apos;
		int vp = curr.vpos;

		if (arr[ap].size() > vp + 1)
		{
			Triplet vt(arr[ap][vp + 1], ap, vp + 1);
			pq.push(vt);
		}
	}

	return vec;
}

int kthSmallest(int arr[], int n, int k)
{
	priority_queue<int, vector<int>, greater<int>>  pq;

	for (int i = 0; i < n; i++)
		pq.push(arr[i]);

	//for (int i = k; i < n; i++)
	//{
	//	if (arr[i] > pq.top())
	//	{
	//		pq.pop();
	//		pq.push(arr[i]);
	//	}
	//}

	int i = 1;

	if (k == 1)  return pq.top();

	while (i!=k)
	{
		pq.pop();
		i++;
	}

	return pq.top();
}


vector<int> FindKClosest(vector<int> v, int k, int val)
{
	vector<int>  vec;
	priority_queue<pair<int,int>> pq;

	//create max heap of first k elements. Add diff and indexes
	for (int i = 0; i < k; i++)
	{
		pq.push({ abs(v[i] - val),i });
	}

	//compare 
	for (int i = k; i < v.size(); i++)
	{
		int diff = abs(v[i] -val);
		if (pq.top().first > diff)
		{
			pq.pop();
			pq.push({ diff,i });
		}
	}

	while (!pq.empty())
	{
		vec.push_back(v[pq.top().second]);
		pq.pop();
	}
	return vec;

}


int main()
{
	vector<int> v1 = {30,40,32,33,36,37};

	vector<int> v2 = FindKClosest(v1,3,38);

	for (auto ele : v2)
		cout << ele << "  ";

	return 0;
}

