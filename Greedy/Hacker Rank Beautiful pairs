#include<iostream>
#include<vector>
#include<algorithm>
#include<unordered_map>
using namespace std;

int beautifulPairs(vector<int> A, vector<int> B)
{
	int res = 0;
	unordered_map<int, int> freqmap;
	for (int i = 0; i < A.size(); i++)
		freqmap[A[i]]++;

	for (int j = 0; j < B.size(); j++)
	{
		if (freqmap.find(B[j]) != freqmap.end())
		{
			freqmap[B[j]]--;
			if (freqmap[B[j]] >= 0)
				res++;
		}
	}

	return res;   
}

//o(n*n)

/*int beautifulPairs(vector<int> A, vector<int> B)
{
	int a = 0;
	for (int i = 0; i < A.size(); i++)
	{
		for (int j = 0; j < B.size(); j++)
		{
			if (A[i] == B[j])
			{
				A[i] = -1;
				B[j] = -1;
				a++;
				break;
			}
		}
	}
	if (a == A.size())
		return a - 1;
	return a + 1;
}*/

int main()
{
	vector<int> v1 = { 3,5,7,11,5,8 };
	vector<int> v2 = { 5,7,11,10,5,8 };


	cout << beautifulPairs(v1, v2);
	return 0;
}
