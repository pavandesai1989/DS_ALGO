#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

struct Job
{
	int id;	 // Job Id 
	int dead; // Deadline of job 
	int profit; // Profit if job is over before or on deadline 
};

bool compare(Job j1, Job j2)
{
	return j1.profit > j2.profit;
}

//Function to find the maximum profit and the number of jobs done.
vector<int> JobScheduling(Job arr[], int n)
{
	sort(arr, arr + n, compare);
	vector<int> res; //return the count of job and max profit
	int slot[5];

	int njobs = 0;
	int profit = 0;

	for (int i = 0; i < n; i++)
		slot[i] = false;

	for (int i = 0; i < n; i++)
	{
		for (int j = min(n, arr[i].dead) - 1; j >= 0; j--)
		{
			if (slot[j] == false)
			{
				njobs++;
				profit += arr[i].profit;
				slot[j] = true;
				break;
			}
		}
	}
	res.push_back(njobs);
	res.push_back(profit);

	return res;
}


int main()
{
	Job arr[] = { { 'a', 2, 100 }, { 'b', 1, 19 },
			   { 'c', 2, 27 },  { 'd', 1, 25 },
			   { 'e', 3, 15 } };

	int size = sizeof(arr) / sizeof(arr[0]);

	JobScheduling(arr, size);

	return 0;
}
