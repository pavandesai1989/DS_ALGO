#include<iostream>
#include<algorithm>
#include<queue>
#include<stack>
#include<map>
using namespace std;

class node
{
public:
	int data;
	node* left;
	node* right;

public:
	node(int d) :data(d), left(nullptr), right(nullptr) {
	}
};

void Inorder(node* root)
{
	if (root != nullptr)
	{
		Inorder(root->left);
		cout << root->data << " ";
		Inorder(root->right);
	}
}

void PrintTopView(node* root) 
{
	if (root == NULL)  return;
	queue<pair<node*, int>> q;
	map<int, int> mp;

	q.push({root,0}); // root node height is 0 . push root in to the queue

	while (!q.empty())
	{
		node* temp = q.front().first;
		int d = q.front().second;

		q.pop(); 
		// If any node is not at that vertical distance
        // just insert that node in map and print it
		if (mp.find(d) == mp.end())
		{
			mp[d] = temp->data; 
		}

		//continue for the left node
		if (temp->left)  q.push({temp->left,d-1});

		//continue for the right node
		if (temp->right)  q.push({ temp->right,d + 1 });
	}

	//print data of map
	for (auto elem : mp)
	{
		std::cout << elem.second<<" ";
	}
}

int main()
{
	node* root = new node(10);
	root->left = new node(15);
	root->right = new node(20);

	root->left->left = new node(30);

	root->right->left = new node(40);
	root->right->right = new node(50);

	root->right->left->left = new node(60);
	root->right->left->right = new node(70);

	PrintTopView(root);  //30 15 10 20 50

	return 0;
}

