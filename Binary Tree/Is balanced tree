#include<iostream>
#include<algorithm>
#include<queue>
#include<stack>
#include<map>
#include<list>
using namespace std;

class node
{
public:
	int data;
	node* left;
	node* right;

public:
	node(int d) :data(d), left(nullptr), right(nullptr) {
	}
};

void Inorder(node* root)
{
	if (root != nullptr)
	{
		Inorder(root->left);
		cout << root->data << " ";
		Inorder(root->right);
	}
}

int IsBalancedTree(node* root)
{
	if (root == NULL)  return 0;

	int lh = IsBalancedTree(root->left);
	if (lh == -1)  return -1;

	int rh = IsBalancedTree(root->right);
	if (rh == -1)  return -1;

	if (abs(lh - rh) > 1)
		return -1;
	else
		return max(lh, rh) + 1;
}


//int height(Node* node)
//{
//	/* base case tree is empty */
//	if (node == NULL)
//		return 0;
//
//	/* If tree is not empty then
//	height = 1 + max of left
//		height and right heights */
//	return 1 + max(height(node->left),
//		height(node->right));
//}


//bool isBalanced(Node *root)
//{
//	if (root == NULL)  return 1; //**************
//
//	int lh = isBalanced(root->left);
//	int rh = isBalanced(root->right);
//
//
//	if (abs(lh - rh) <= 1 && isBalanced(root->left) && isBalanced(root->right))
//		return 1;
//
//	return 0;
//
//}

int main()
{
	node* root = new node(8);
	root->left = new node(12);
	root->right = new node(15);

	root->left->left = new node(13);
	root->left->right = new node(14);

	root->right->right = new node(16);
	root->right->right->right = new node(17);

	if (IsBalancedTree(root) == -1)
		cout << "Not Balanced " << endl;
	else
		cout << "Balanced " << endl;

	return 0;
}

