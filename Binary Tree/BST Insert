#include<iostream>
using namespace std;

class Node
{
public:
	int data;
	Node* left;
	Node* right;

public:
	Node(int d) :data(d), left(nullptr), right(nullptr) {

	}
};



void Inorder(Node* root)
{
	if (root == NULL) return;

	Inorder(root->left);
	cout << root->data << " ";
	Inorder(root->right);
}


//recursive
Node* insertRecursive(Node* root, int Key)
{
	if (root == NULL) return new Node(Key);
	else if (Key < root->data)
		root->left = insertRecursive(root->left, Key);
	else if (Key > root->data)
		root->right = insertRecursive(root->right,Key);

	return root;
}


// The function returns the root of the BST (currently rooted at 'root') 
// after inserting a new Node with value 'Key' into it. 
Node* insert(Node* root, int Key)
{
	Node* temp = new Node(Key);  //create a node to be inserted

	Node*parent = NULL;
	Node* curr = root;

	//identify the place to insert this node. Identify parent node
	while (curr != NULL)
	{
		parent = curr;
		if (curr->data > Key)   curr = curr->left;
		else if (curr->data < Key)   curr = curr->right;
		else return root;
	}

	if (parent == NULL) return temp;
	else if (Key < parent->data) parent->left = temp;
	else parent->right = temp;


	return root;
}

//iterative  Time : O(height )  Space : O(1)
bool SearchBST(Node* root, int key)
{
	while (root != nullptr)
	{
		if (root->data == key)  return true;
		else if (root->data > key)  root = root->left;
		else root = root->right;
	}
	return false;
}


int main()
{
	Node* root = NULL;

	Node* n1 = insertRecursive(root,2);
	Node* n2 = insertRecursive(n1,1);

	Node* n3 = insertRecursive(n2,3);
	Node* n4 = insertRecursive(n3,6);

	Node* n5 = insertRecursive(n4, 4);

	Inorder(n4);  //1 2 3 4 6

	cout << endl;

	if (SearchBST(n5,4))
		cout << " Found " << endl;
	else
		cout << "Not Found" << endl;

	return 0;
}
