#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;

class node
{
public:
	int data;
	node* left;
	node* right;

public:
	node(int d) :data(d), left(nullptr), right(nullptr) {
	}
};

void Inorder(node* root)
{
	if (root != nullptr)
	{
		Inorder(root->left);
		cout << root->data << " ";
		Inorder(root->right);
	}
}

/*
 Recursive Solution
 Does preorder traversal
 const work Time O(n)
 Space O(height of BT)
*/

int maxlevel = 0;
void PrintLeft(node* root,int level)
{
	if (root == nullptr)  return;

	if (maxlevel < level)
	{
		cout << root->data << " ";
		maxlevel = level;
	}

	PrintLeft(root->left, level+1);
	PrintLeft(root->right,level+1);
}

void  PrintLeftView(node* root)
{
	PrintLeft(root,1);
}

/*
Iterative approach
*/

void PrintLeftViewIterative(node* root)
{
	if (root == nullptr) return;
	queue<node*> q;
	q.push(root);

	while (!q.empty())
	{
		int size = q.size();
		for (int i = 0; i < size; i++)
		{
			node* curr = q.front();
			q.pop();

			if (i == 0)  cout << curr->data << " ";

			if (curr->left != nullptr)
				q.push(curr->left);

			if (curr->right != nullptr)
				q.push(curr->right);
		}
	}
}


int main()
{
	node* root = new node(10);
	root->left = new node(15);
	root->right = new node(20);

	root->left->left = new node(30);

	root->right->left = new node(40);
	root->right->right = new node(50);

	root->right->left->left = new node(60);
	root->right->left->right = new node(70);

	PrintLeftViewIterative(root);
	return 0;
}

