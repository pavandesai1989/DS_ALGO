#include<iostream>
#include<algorithm>
#include<queue>
#include<stack>
#include<map>
#include<list>
using namespace std;

class node
{
public:
	int data;
	node* left;
	node* right;

public:
	node(int d) :data(d), left(nullptr), right(nullptr) {
	}
};

void Inorder(node* root)
{
	if (root != nullptr)
	{
		Inorder(root->left);
		cout << root->data << " ";
		Inorder(root->right);
	}
}

//using the logic of level by level traversal
// Time O(n)  each node enqueue and dequeue only once 
// at most 4 traversal O(n)
//data goes and comes from 2 DS here 
void PrintSpiralForm(node* root)
{
	if (root == NULL)  return;
	queue<node*>  q;
	stack<int> s;
	bool reverse = false;

	q.push(root);

	while (!q.empty())
	{
		int count = q.size();
		for(int i=0;i<count;i++)
		{
			node* temp = q.front();
			q.pop();

			if (reverse)
				s.push(temp->data);
			else
				cout << temp->data << " ";

			if (temp->left)  q.push(temp->left);
			if (temp->right)  q.push(temp->right);
		}

		if (reverse) //print stack
		{
			while (!s.empty())
			{
				cout << s.top() << " ";
				s.pop();
			}
		}
		reverse = !reverse;
	}
}


void PrintSpiralEff(node* root)
{
	stack<node*>  s1, s2;

	s1.push(root);

	while (!s1.empty() || (!s2.empty()))
	{
		while (!s1.empty()) //take out and print and push children in to stack 2
		{
			node* temp = s1.top();
			cout << temp->data << " ";
			s1.pop();

			if (temp->left)  s2.push(temp->left);
			if (temp->right)  s2.push(temp->right);
		}

		while (!s2.empty()) //tale out and print data. Push children in reverse order in stack1. Push right child first andthen left
		{
			node* temp = s2.top();
			cout << temp->data << " ";
			s2.pop();

			if (temp->right)  s1.push(temp->right);
			if (temp->left)  s1.push(temp->left);
		}
	}
}




int main()
{
	node* root = new node(1);
	root->left = new node(2);
	root->right = new node(3);

	root->left->left = new node(4);
	root->left->right = new node(5);

	root->left->left->left = new node(8);
	root->left->left->right = new node(9);

	root->right->left = new node(6);
	root->right->right = new node(7);

	root->right->left->left = new node(10);

	PrintSpiralEff(root);   //1 3 2 4 5 6 7 10 9 8

	return 0;
}


//Geeks submitted 
/*vector<int> findSpiral(Node *root)
{
	vector<int>  vec;
	if (root == NULL)  return vec;

	stack<Node*>  s1, s2;
	s1.push(root);

	while (!s1.empty() || (!s2.empty()))
	{
		while (!s1.empty())
		{
			Node* temp = s1.top();
			s1.pop();
			vec.push_back(temp->data);

			if (temp->right)  s2.push(temp->right);
			if (temp->left)  s2.push(temp->left);
		}

		while (!s2.empty())
		{
			Node* temp = s2.top();
			s2.pop();
			vec.push_back(temp->data);

			if (temp->left)  s1.push(temp->left);
			if (temp->right)  s1.push(temp->right);
		}

	}
}

*/

