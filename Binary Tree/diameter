#include<iostream>
#include<algorithm>
#include<queue>
#include<stack>
#include<map>
#include<list>
using namespace std;

class node
{
public:
	int data;
	node* left;
	node* right;

public:
	node(int d) :data(d), left(nullptr), right(nullptr) {
	}
};

void Inorder(node* root)
{
	if (root != nullptr)
	{
		Inorder(root->left);
		cout << root->data << " ";
		Inorder(root->right);
	}
}

// The function Compute the "height" of a tree. Height is
// the number f nodes along the longest path from the root
// node down to the farthest leaf node.
int height(struct node* node)
{
	// base case tree is empty
	if (node == NULL)
		return 0;

	// If tree is not empty then height = 1 + max of left
	// height and right heights
	return 1 + max(height(node->left), height(node->right));
}

int diameter(struct node* tree)
{
	// base case where tree is empty
	if (tree == NULL)
		return 0;

	// get the height of left and right sub-trees
	int lheight = height(tree->left);
	int rheight = height(tree->right);

	// get the diameter of left and right sub-trees
	int ldiameter = diameter(tree->left);
	int rdiameter = diameter(tree->right);

	// Return max of following three
	// 1) Diameter of left subtree
	// 2) Diameter of right subtree
	// 3) Height of left subtree + height of right subtree + 1
	return max(lheight + rheight + 1,max(ldiameter, rdiameter));
}




int main()
{
	node* root = new node(1);
	root->left = new node(2);
	root->right = new node(3);

	root->left->left = new node(4);
	root->left->right = new node(5);

	root->left->left->left = new node(8);
	root->left->left->right = new node(9);

	root->right->left = new node(6);
	root->right->right = new node(7);

	root->right->left->left = new node(10);

	PrintSpiralEff(root);   //1 3 2 4 5 6 7 10 9 8

	return 0;
}



