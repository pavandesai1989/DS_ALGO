#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;

class node
{
public:
	int data;
	node* left;
	node* right;

public:
	node(int d) :data(d), left(nullptr), right(nullptr) {
	}
};

void Inorder(node* root)
{
	if (root != nullptr)
	{
		Inorder(root->left);
		cout << root->data << " ";
		Inorder(root->right);
	}
}
/*
Time : constant work O(n)
Space : O(height of binary tree)

*/
int MaxValueInBinaryTree(node* root)
{
	if (root == nullptr)
		return INT_MIN;
	else
		return max( root->data, max(MaxValueInBinaryTree(root->left), MaxValueInBinaryTree(root->right)) );	
}


int main()
{
	node* root = new node(10);
	root->left = new node(15);
	root->right = new node(20);

	root->left->left = new node(30);

	root->right->left = new node(40);
	root->right->right = new node(50);

	root->right->left->left = new node(60);
	root->right->left->right = new node(70);

	cout << "Maximum value in Binary Tree is " << MaxValueInBinaryTree(root) << endl;
	return 0;
}

