#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;

class node
{
public:
	int data;
	node* left;
	node* right;

public:
	node(int d) :data(d), left(nullptr), right(nullptr) {
	}
};

void Inorder(node* root)
{
	if (root != nullptr)
	{
		Inorder(root->left);
		cout << root->data << " ";
		Inorder(root->right);
	}
}

int MaximumWidthOfTree(node* root, vector<int> &vec)
{
	int Max_Width = 0;

	if (root == nullptr)  return 0;
	queue<node*>  q;
	q.push(root);

	while (!q.empty())  //Note this condition
	{
		int qsize = q.size();
		bool populate = qsize > Max_Width;
		Max_Width = max(Max_Width, qsize);
		node* curr = q.front();

		queue<node*> temp = q;
		q.pop();
		if(populate) vec.clear();
		while (!temp.empty())
		{
			if (populate)
				vec.push_back(temp.front()->data);  //print the elements having maximum width in Binary Tree
			temp.pop();
		}
		if (curr->left != nullptr)  q.push(curr->left);
		if (curr->right != nullptr)  q.push(curr->right);
	}

	return Max_Width;
}

int getMaxWidth(Node* root)
{
	if (root == NULL) return 0;

	int Max_Width = 0;
	queue<Node*> q;
	q.push(root);

	while (!q.empty())
	{
		int qsize = q.size();
		Max_Width = max(Max_Width, qsize);

		while (qsize--)
		{
			Node* curr = q.front();
			q.pop();

			if (curr->left != NULL)  q.push(curr->left);
			if (curr->right != NULL) q.push(curr->right);
		}
	}

	return Max_Width;
}

int main()
{
	vector<int> vec;
	node* root = new node(10);
	root->left = new node(15);
	root->right = new node(20);

	root->left->left = new node(30);

	root->right->left = new node(40);
	root->right->right = new node(50);

	root->right->left->left = new node(60);
	root->right->left->right = new node(70);

	cout << "Maximum width of Binary Tree is " << MaximumWidthOfTree(root, vec) << endl;

	for_each(vec.begin(), vec.end(), [](const int&ele) {cout << ele << " "; });
	return 0;
}

