#include<iostream>
#include<algorithm>
#include<queue>
#include<stack>
using namespace std;

class node
{
public:
	int data;
	node* left;
	node* right;

public:
	node(int d) :data(d), left(nullptr), right(nullptr) {
	}
};

void Inorder(node* root)
{
	if (root != nullptr)
	{
		Inorder(root->left);
		cout << root->data << " ";
		Inorder(root->right);
	}
}

void PrintRightView(node* root) //Note push right child first in queue!!!!!!!!!!!
{
	if (root == nullptr)  return;

	queue<node*>  q;
	q.push(root);

	while (!q.empty())  //Note this condition
	{
		int qsize = q.size();
		for (int i = 0; i < qsize; i++)
		{
			node* curr = q.front();
			q.pop();
			if (i == 0) cout << curr->data << " ";
			if (curr->right != nullptr)  q.push(curr->right);
			if (curr->left != nullptr)  q.push(curr->left);
		}
	}
}

// USE SAME CODE USED FOR THE LEFT VIEW. PRINT WHEN i == n
void PrintRightViewUsingSameLeftViewCode(node* root)
{
	if (root == nullptr) return;
	queue<node*> q;
	q.push(root);

	while (!q.empty())
	{
		int size = q.size();
		for (int i = 0; i < size; i++)
		{
			node* curr = q.front();
			q.pop();

			if (i == size-1)  cout << curr->data << " ";

			if (curr->left != nullptr)
				q.push(curr->left);

			if (curr->right != nullptr)
				q.push(curr->right);
		}
	}
}

int main()
{
	vector<int> vec;
	node* root = new node(10);
	root->left = new node(15);
	root->right = new node(20);

	root->left->left = new node(30);

	root->right->left = new node(40);
	root->right->right = new node(50);

	root->right->left->left = new node(60);
	root->right->left->right = new node(70);

	PrintRightViewUsingSameLeftViewCode(root);

	return 0;
}

