#include<iostream>
#include<algorithm>
#include<queue>
#include<stack>
#include<map>
#include<list>
using namespace std;

class node
{
public:
	int data;
	node* left;
	node* right;

public:
	node(int d) :data(d), left(nullptr), right(nullptr) {
	}
};

void Inorder(node* root)
{
	if (root != nullptr)
	{
		Inorder(root->left);
		cout << root->data << " ";
		Inorder(root->right);
	}
}

void VerticalOrderTraversal(node* root)
{
	if (root == NULL)  return;
	queue<pair<node*, int>> q;
	map<int, vector<int>> mp;

	q.push({ root,0 }); // root node height is 0 . push root in to the queue

	while (!q.empty())
	{
		node* temp = q.front().first;
		int d = q.front().second;

		q.pop();
	    mp[d].push_back(temp->data);

		//continue for the left node
		if (temp->left)  q.push({ temp->left,d - 1 });

		//continue for the right node
		if (temp->right)  q.push({ temp->right,d + 1 });
	}

	// Traverse the map and print nodes at
	// every horigontal distance (hd)
	map<int, vector<int> >::iterator it;
	for (it = mp.begin(); it != mp.end(); it++) {
		for (int i = 0; i < it->second.size(); ++i)
			cout << it->second[i] << " ";
		cout << endl;
	}
}

int main()
{
	node* root = new node(1);
	root->left = new node(2);
	root->right = new node(3);

	root->left->left = new node(4);
	root->left->right = new node(5);

	root->right->right = new node(6);

	VerticalOrderTraversal(root);  

	return 0;
}

