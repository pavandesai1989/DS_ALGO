#include<iostream>
#include<vector>
using namespace std;


class node
{
public:
	int data;
	node* left;
	node* right;

public:
	node(int d) :data(d), left(nullptr), right(nullptr) {
	}
};

void Inorder(node* root)
{
	if (root != nullptr)
	{
		Inorder(root->left);
		cout << root->data << " ";
		Inorder(root->right);
	}
}


node* LCAEfficient(node* root,int n1, int n2)
{
	if (root == nullptr) return nullptr;

	if (root->data == n1 || root->data == n2) return root;
	node* left_lca = LCAEfficient(root->left, n1, n2);
	node* right_lca = LCAEfficient(root->right,n1,n2);

	if (left_lca && right_lca)  return root;

	if (left_lca != nullptr)  return left_lca;
	else return right_lca;
}



int main()
{
	node* root = new node(10);

	root->left = new node(20);
	root->right = new node(30);

	root->right->left = new node(40);
	root->right->right = new node(50);

	node* res = LCAEfficient(root,40,50);

	cout << "LCA is " << res->data << endl;
		
	return 0;
}
