/************************************************************

    Following is the linked list node structure:
    
    template <typename T>
    class Node {
        public:
        T data;
        Node* next;

        Node(T data) {
            next = NULL;
            this->data = data;
        }
    };

************************************************************/

Node<int>* reverse(Node<int>* head)
{
    if(!head)
        return head;
    
    Node<int>* C = head;
    Node<int>* P = NULL;
    Node<int>* N = NULL;
    
    while(C!=NULL)
    {
        //store the next node
        N = C->next;
        //point cuur  to prev 
        C->next = P;
        //update P and c
        P = C;
        C = N;        
    }
    return P;
}

Node<int>* AddUtil(Node<int>* head1,Node<int>* head2)
{
    Node<int>* res_head = NULL;
    Node<int>* curr = NULL;
    int carry = 0;
    
    while(head1 || head2 || carry!=0)
    {
        int sum = 0;
        if(head1) sum = sum + head1->data;
        if(head2) sum = sum + head2->data;
        sum = sum + carry;
        
        carry = (sum>=10) ? 1 : 0;
        sum = sum %10; 
        
        if(!res_head)
        {
            res_head = new Node<int>(sum);
            curr = res_head;
        }
        else
        {
            curr->next = new Node<int>(sum);
            curr = curr->next;
        }        
        if(head1) head1 = head1->next;
        if(head2) head2 = head2->next;        
    }
    return res_head;
}

Node<int>* addTwoLists(Node<int>* first, Node<int>* second) 
{
    Node<int>* first_head = reverse(first);
    Node<int>* second_head = reverse(second);
    
    Node<int>* res = AddUtil(first_head,second_head);
    
    return reverse(res);
}
