/****************************************************************

    Following is the class structure of the LinkedListNode class:

    template <typename T>
    class LinkedListNode
    {
    public:
        T data;
        LinkedListNode<T> *next;
        LinkedListNode(T data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

*****************************************************************/

LinkedListNode<int>* ReverseLinkList(LinkedListNode<int>* head)
{
    LinkedListNode<int>* C = head;
    LinkedListNode<int>* P = NULL;
    LinkedListNode<int>* N = NULL;
    
    while(C!=NULL)
    {
       //store the next addrress
       N = C->next;
       //make cuur points to the previuos
       C->next = P;
       
       //update P and C
       P = C;
       C = N;
    }
    
    return P;    
}

bool isPalindrome(LinkedListNode<int> *head) 
{
    if(head == NULL || head->next == NULL)
        return true;
    
    //find middle of the link list
    LinkedListNode<int>* slow = head;
    LinkedListNode<int>* fast = head;
    
    while( slow && fast && fast->next!=NULL && fast->next->next!=NULL)
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    //slow points to the mid of the link list 
    
    //reverse the second half
    slow->next = ReverseLinkList(slow->next);    
    //move slow to 1 position
    slow = slow->next;    
    while(slow!=NULL )
    {
        if(slow->data != head->data)
            return false;
        head = head->next;
        slow = slow->next;
    }
    return true;
}




