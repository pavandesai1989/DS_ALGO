#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

vector<long long> printFib_Bottom_Up(int n)
{
	vector<long long> res;

	long long dp[100] = { 0 };
	dp[0] = 1;
	res.push_back(dp[0]);
	if (n == 1) return res;

	dp[1] = 1;
	res.push_back(dp[1]);
	if (n == 2) return res;

	for (int i = 2; i < n; i++)
	{
		dp[i] = dp[i - 1] + dp[i - 2];
		res.push_back(dp[i]);
	}

	return res;
}
long long findNthFibonacci_Top_Bottom(int number, long long int dp[])
{
	//base case
	dp[0] = 1;
	dp[1] = 1;
	long long res = 0;
	if (number == 0 || number == 1) return number;

	//look up 
	if (dp[number] != 0)   return dp[number];

	res = findNthFibonacci_Top_Bottom(number - 1, dp) + findNthFibonacci_Top_Bottom(number - 2, dp);
	dp[number] = res;

	return dp[number];
}


int main()
{
	long long dp[100] = { 0 };
	cout<< findNthFibonacci_Top_Bottom(5,dp);

	return 0;
}
