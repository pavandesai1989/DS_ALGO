#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;
/*
Given number n. You can do n/3 if divisible by 3, n/2 if divisible by 2 , n-1.
find minimum steps to reduce n to 

*/

//top down 
int MinSteps(int n,int dp[])
{
	//base 
	if (n == 1) return 0;

	//look up in dp array
	if (dp[n] != 0)
		return dp[n];

	int op1, op2, op3;
	op1 = op2 = op3 = INT_MAX;

	if (n % 3 == 0)
		op1 = MinSteps(n / 3, dp)+1;
	
	if (n % 2 == 0)
		op2 = MinSteps(n / 2, dp)+1;

	op3 = MinSteps(n - 1, dp)+1;

	int res = min(min(op1, op2), op3);
	dp[n] = res;

	return dp[n];
}


//Bottom Up

int MinStepsBU(int n)
{
	int dp[100] = { 0 };
	dp[1] = 0;

	for (int i = 2; i <= n; i++)
	{
		int op1, op2, op3;
		op1 = op2 = op3 = INT_MAX;

		if (i % 3 == 0)
			op1 = dp[i/3];
		if (i % 2 == 0)
			op2 = dp[i/2];

		op3 = dp[i-1];

		dp[i] = min(min(op1,op2),op3) + 1;
	}


	return dp[n];
}



int main()
{
	int dp[100] = { 0 };
	cout << MinStepsBU(10);

	return 0;

}
