#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

int Getways_TD(int nosteps,int jumps,int dp[])
{
	if (nosteps == 0) 
		return 1;

	int ways = 0;

	if (dp[nosteps] != 0)  
		return dp[nosteps];

	for (int i = 1; i <= jumps; i++)
	{
		if(nosteps - i>=0)
		   ways += Getways_TD(nosteps - i, jumps, dp);
	}

	return dp[nosteps] = ways;
}

long long Getways_BU(int n, int k)
{
	long long dp[100] = { 0 };
	dp[0] = 1;

	for (int i = 1; i <= n; i++)
	{
		dp[i] = 0;
		for (int j = 1; j <= k; j++)
		{
			if(i-j>=0)
			dp[i] = dp[i] + dp[i - j];
		}
	}

	return dp[n];
}



//sliding window to BU   Time (o*k)
int Getways_Optimised(int n, int k)
{
	int dp[100] = { 0 };
	dp[0] = dp[1] = 1;

	//sum of first window
	for (int i = 2; i <= k; i++)
	{
		dp[i] = 2 * dp[i - 1]; //OR sum of ele s
	}

	for (int i = k + 1; i <= n; i++)
	{
		dp[i] = 2 * dp[i - 1] - dp[n - k - 1];
	}
	return dp[n];
}



int main()
{
	int dp[100] = { 0 };

	cout << Getways_TD(4,3,dp) << endl;

	return 0;
}
