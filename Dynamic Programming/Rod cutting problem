#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

int Max_profit(vector<int> vec,int n,int dp[100])
{
	if (n <= 0) return 0;
	int ans = INT_MIN;

	for (int i = 0; i < n; i++)
	{
		int cut = i + 1;
		int curr = vec[i] + Max_profit(vec, n - cut,dp);

		ans = max(curr,ans);		
	}
	dp[n] = ans;

	return dp[n];
}


int max_profit_botom_up(vector<int> vec, int n)
{
	int dp[100] = { 0 };

	for (int len = 1; len <= n; len++)  //for cut 3 we have to use 0 1 2
	{
		int ans = INT_MIN;
		for (int i = 0; i < len; i++)
		{
			int cut = i + 1;
			int curr = vec[i] + dp[len - cut];
			ans = max(ans, curr);
		}
		dp[len] = ans;
	}

	return dp[n];

}

int main()
{
	vector<int> vec = { 1,5,8,9,1,17,17,20 };
	int dp[100] = { 0 };

	cout << max_profit_botom_up(vec,vec.size()) << endl;

	return 0;
}
