#include<iostream>
#include<vector>
#include<list>
using namespace std;

/*  GFG 
https://practice.geeksforgeeks.org/problems/separate-chaining-in-hashing-1587115621/1/?track=DSASP-Hashing&batchId=154#

*/
vector<vector<int>> separateChaining(int hashSize, int arr[], int sizeOfArray)
{
	vector<vector<int>> res;
	list<int>* ptr;
	ptr = new list<int>[hashSize];

	for (int i = 0; i < sizeOfArray; i++)
	{
		int iHashValue = arr[i] % hashSize;
		ptr[iHashValue].push_back(arr[i]);
	}

	for (int i = 0; i < hashSize; i++)
	{
		vector<int> vec;
		list<int>::iterator it;
		for (it = ptr[i].begin(); it != ptr[i].end(); it++)
		{
			vec.push_back((*it));
		}
		res.push_back(vec);
	}
	return res;
}


/*
     complete implementation of hashing with separate chaining
*/


class myHash
{
private:
	list<int>* pbucket;
	int bucketsize;

public:
	myHash(int tablesize):bucketsize(tablesize)  //create Hash Table
	{
		pbucket = new list<int>[bucketsize];
	}

	void insert(int key);
	int hashkey(int key);
	void displayhash();
	void deletekey(int key);
	bool search(int key);
};


void myHash::insert(int key)
{
	int idx = hashkey(key);
	pbucket[idx].push_back(key);
}

int myHash::hashkey(int key)
{
	return (key%bucketsize);
}

void myHash::displayhash()
{
	for (int i = 0; i < bucketsize; i++)
	{
		cout << i;
		for (auto ele : pbucket[i])
		{
			cout << "-->" << ele;
		}
		cout << endl;
	}
}

bool myHash::search(int key)
{
	int idx = hashkey(key);
	list<int>::iterator it;

	for (it = pbucket[idx].begin(); it != pbucket[idx].end(); it++)
	{
		if (*it == key)  return true;
	}

	return false;
}


void myHash::deletekey(int key)
{
	int idx = hashkey(key);
	list<int>::iterator it;

	for (it = pbucket[idx].begin(); it != pbucket[idx].end(); it++)
	{
		if (*it == key)  break;
	}

	//if key is found
	if (it != pbucket[idx].end())
	{
		pbucket[idx].erase(it);
	}
}


int main()
{
	// array that contains keys to be mapped
	int a[] = { 15, 11, 27, 8, 12 };
	int n = sizeof(a) / sizeof(a[0]);

	// insert the keys into the hash table
	myHash h(7);   // 7 is count of buckets in
				 // hash table
	for (int i = 0; i < n; i++)
		h.insert(a[i]);

	// display the Hash table
	h.displayhash();

	// delete 12 from hash table
	h.deletekey(12);

	// display the Hash table
	h.displayhash();

	return 0;
}
